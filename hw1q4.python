import random
import numpy as np
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt

def simulate(N):
    '''
    Generate N independent samples from f(x)=x(1-x)/Z with Z=1/6
    Args:
        N - the number of samples required
    Returns:
        nums - a 1D numpy array of samples
    '''
    generator = random.Random()
    generator.seed() # seed using current time or OS source
    
    nums = np.zeros(N)
    three_uniform = [None]*3 # this list contains 3 numbers drawn from uniform(0,1)
    
    for i in range(N):
        # each round of loop, generate 3 uniform, sort them, and put the 2nd rank into nums
        for j in range(3):
            three_uniform[j] = generator.random()
        # sort the 3 uniform numbers
        three_uniform.sort()
        # put the 2nd rank into nums
        nums[i] = three_uniform[1]
    
    return nums
    
def plot_hist(nums,dx):
    '''
    Make a histogram of the samples contained in nums
    Plot this histogram with the pdf to see asymptotic behavior for large N
    Args:
        nums - a 1D numpy array of samples
        dx - bin size of the histogram
    Returns:
        p - the % of values in nums contained inside a one standard deviation error bar
        display histogram
        draw one standard deviation error bars on the histogram values
    '''

def main():
    # TODO

if __name__ == '__main__':   # this is the boilerplate portion
    main()